This example demonstrates how ENCORE can be used to assess the
convergence of ensembles obtained from molecular dynamics (MD)
simulations. A complete and exhaustive assessment of the convergence
of a simulation is difficult. Nonetheless, it is possible at least to
evaluate whether equilibrium has been reached at least locally within
the conformational basin(s) that have been sampled.

Here, this is performed by comparing the whole MD ensemble
(trajectory) with time-windows (i.e. continuous portions of a
trajectory) of the same trajectory of increasing size. In this way, we
can answer the question of how quickly a simulation converges to our
current best estimate of the complete distribution of conformations
(i.e. the entire simulation).

If a simulation rapidly reaches a (local) equilibrium so that the
distribution of conformations is relatively stable, the calculated
ensemble similarity between subsegments and the entire simulation will
quickly drop to low values. Conversely, a simulation which continues
to sample new conformations or for which the populations of different
basins do not stabilize will more slowly drop to an ensemble
similarity score of zero. Note that since the calculations compare
segments of increasing size to the entire simulation, the final score
will always be zero. This does of course not indicate that convergence
has been reached, and so instead the quantity to monitor is the rate
and time to which low values are reached.

In this example, we use both the clustering-based (CES) and
dimensionality reduction-based (DRES) ensemble comparison methods to
assess the convergence oftwo 500-ns MD simulation trajectories, each
sampled every 500 ps (i.e. 250 frames in each simulation). The two
simulations only differ by the force field used (CHARMM22* and AMBER
ff99SB-ILDN*).

Running the examples, assuming that ENCORE is correctly installed and
that the set_environment.sh file is properly set up, is just a matter
of running the .sh files. The output log files will contain a list of
values, which are the results of the comparison between the
time-window of increasingsize and the full trajectory. In this
example, the time-window length is 50 ns and it increases of 50 ns for
every step, so that there will be ten windows in total.

IMPORTANT: Please run ces.sh before dres.sh. This is because ces.sh
will save the -RMSD matrix as a file on disk. The dimensionality
reduction method (used in the script dres.sh) loads the matrix and
changes the signs of its elements instead of recomputing it from
scratch, thus saving computational time.



